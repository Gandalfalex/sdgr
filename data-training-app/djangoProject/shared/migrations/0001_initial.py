# Generated by Django 4.2.4 on 2024-02-04 14:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='JwtUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('last_name', models.CharField(blank=True, max_length=255, null=True)),
                ('password', models.CharField(max_length=255)),
                ('role', models.CharField(choices=[('USER', 'User'), ('ADMIN', 'Admin')], default='USER', max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': '_user',
            },
        ),
        migrations.CreateModel(
            name='ImputationAlgorithm',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(help_text='description of the imputation algorithm', max_length=250)),
            ],
            options={
                'db_table': 'imputation_algorithm',
            },
        ),
        migrations.CreateModel(
            name='PreprocessorType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='name of the preprocessor', max_length=50, unique=True)),
                ('description', models.CharField(help_text='description of the preprocessor', max_length=255)),
                ('schema_enum_value', models.CharField(help_text='string name of the value that is presented in the frontend', max_length=50)),
                ('schema', models.JSONField(help_text='JSON_Schema of the object')),
            ],
            options={
                'db_table': 'preprocessor_type',
            },
        ),
        migrations.CreateModel(
            name='SchemaValidationForms',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='base schema name for usage', max_length=30)),
                ('schema', models.JSONField(help_text='base json_schema, open to configuration')),
                ('ui_schema', models.JSONField(help_text='ui option of the json schema')),
            ],
            options={
                'db_table': 'schema_validation_forms',
            },
        ),
        migrations.CreateModel(
            name='TrainDataFile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='name representation for the frontend', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(help_text='User who owns this solution builder', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'train_data_file',
                'unique_together': {('name', 'user')},
            },
        ),
        migrations.CreateModel(
            name='TrainData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='name representation for the frontend', max_length=50)),
                ('time_series_value', models.JSONField(help_text='value of dataset')),
                ('time_stamp_value', models.JSONField(help_text='time stamps of dataset')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.ForeignKey(help_text='file the current value belongs to', on_delete=django.db.models.deletion.CASCADE, to='shared.traindatafile')),
                ('user', models.ForeignKey(help_text='User who owns this solution builder', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'train_data',
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.JSONField(help_text='survey results of the user')),
                ('user', models.OneToOneField(help_text='User who created the survey', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'survey',
            },
        ),
        migrations.CreateModel(
            name='Preprocessor',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('specific_config', models.JSONField(help_text='contains the specific configuration of the given preprocessor')),
                ('type', models.ForeignKey(help_text='type', on_delete=django.db.models.deletion.CASCADE, to='shared.preprocessortype')),
            ],
            options={
                'db_table': 'preprocessor',
            },
        ),
    ]
